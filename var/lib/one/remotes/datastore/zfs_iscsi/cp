#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

###############################################################################
# This script is used to copy a VM image (SRC) to the image repository as DST
# Several SRC types are supported
###############################################################################

# -------- Set up the environment to source common tools & conf ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/zfs_iscsi/zfs.conf

# -------- Get cp and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

export DRV_ACTION

UTILS_PATH="${DRIVER_PATH}/.."

XPATH="$UTILS_PATH/xpath.rb -b $DRV_ACTION"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SAFE_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/POOL_NAME \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/STAGING_DIR \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/ISCSI_USER \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/ISCSI_PWD \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PATH \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/MD5 \
                    /DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/SHA1 \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NO_DECOMPRESS \
		    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/LIMIT_TRANSFER_BW)

unset i

BASE_PATH="${XPATH_ELEMENTS[i++]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[i++]}"
SAFE_DIRS="${XPATH_ELEMENTS[i++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[i++]}"
POOL_NAME="${XPATH_ELEMENTS[i++]:-$POOL_NAME}"
STAGING_DIR="${XPATH_ELEMENTS[i++]:-$STAGING_DIR}"
ISCSI_USER="${XPATH_ELEMENTS[i++]}"
ISCSI_PWD="${XPATH_ELEMENTS[i++]:-$ISCSI_PWD}"
SRC="${XPATH_ELEMENTS[i++]}"
SIZE="${XPATH_ELEMENTS[i++]}"
MD5="${XPATH_ELEMENTS[i++]}"
SHA1="${XPATH_ELEMENTS[i++]}"
NO_DECOMPRESS="${XPATH_ELEMENTS[i++]}"
LIMIT_TRANSFER_BW="${XPATH_ELEMENTS[i++]}"

DST_HOST=`get_destination_host $ID`

if [ -z "$DST_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS"

IMAGE_HASH=`generate_image_hash`
TMP_DST="$STAGING_DIR/$IMAGE_HASH"

IMAGE_NAME="one-${ID}"
ZVOL_SOURCE="${POOL_NAME}/${IMAGE_NAME}"
ZVOL_DEV="/dev/zvol/$ZVOL_SOURCE"
ZVOL_IQN="iqn.2008-07.org.opennebula:${IMAGE_NAME}"

ISCSI_PWD=$(echo "$ISCSI_PWD" | base64 --decode)

DOWNLOADER_ARGS=`set_downloader_args "$MD5" "$SHA1" "$NO_DECOMPRESS" "$LIMIT_TRANSFER_BW" "$SRC" -`

COPY_COMMAND="$UTILS_PATH/downloader.sh $DOWNLOADER_ARGS"

case $SRC in
http://*|https://*)
    log "Downloading $SRC to the image repository"

    DUMP="$COPY_COMMAND"
    ;;

*)
    if [ `check_restricted $SRC` -eq 1 ]; then
        log_error "Not allowed to copy images from $RESTRICTED_DIRS"
        error_message "Not allowed to copy image file $SRC"
        exit -1
    fi

    log "Copying local image $SRC to the image repository"

    DUMP="$COPY_COMMAND"
    ;;
esac

multiline_exec_and_log "set -e -o pipefail; $DUMP | $SSH $DST_HOST $DD of=$TMP_DST bs=64k" \
             "Error dumping $SRC to $DST_HOST:$TMP_DST"

REGISTER_CMD=$(cat <<EOF
    set -e -o pipefail

    FORMAT=\$($QEMU_IMG info $TMP_DST | grep "^file format:" | awk '{print \$3}' || :)

    if [ "\$FORMAT" != "raw" ]; then
        $QEMU_IMG convert -O raw $TMP_DST $TMP_DST.raw
        mv $TMP_DST.raw $TMP_DST
    fi
    
    $SUDO zfs create -V ${SIZE}M $ZVOL_SOURCE
    $SUDO zfs set refreservation=none $ZVOL_SOURCE

    TIMEOUT=0
    until [ -b /dev/zvol/$ZVOL_SOURCE ]; do
        sleep 1 && let "TIMEOUT +=1"
        if [ "$TIMEOUT" -gt "10" ]; then
            error_message "Error copy $TMP_DST to $ZVOL_SOURCE in $DST_HOST, volume does not appear"
            exit -1
        fi
    done

    $SUDO $DD if=$TMP_DST of=$ZVOL_DEV bs=64k

    # remove original
    $RM -f $TMP_DST

    $SUDO targetcli /backstores/block create ${IMAGE_NAME} /dev/zvol/$ZVOL_SOURCE
    $SUDO targetcli /backstores/block/${IMAGE_NAME} set attribute emulate_tpu=1
    $SUDO targetcli /iscsi create $ZVOL_IQN
    $SUDO targetcli /iscsi/$ZVOL_IQN/tpg1 set attribute authentication=1
    $SUDO targetcli /iscsi/$ZVOL_IQN/tpg1 set attribute generate_node_acls=1
    $SUDO targetcli /iscsi/$ZVOL_IQN/tpg1 set attribute demo_mode_write_protect=0
    $SUDO targetcli /iscsi/$ZVOL_IQN/tpg1 set auth userid=$ISCSI_USER
    $SUDO targetcli /iscsi/$ZVOL_IQN/tpg1 set auth password=$ISCSI_PWD
    $SUDO targetcli /iscsi/$ZVOL_IQN/tpg1/luns create /backstores/block/${IMAGE_NAME}
    $SUDO targetcli saveconfig

EOF
)

ssh_exec_and_log    "$DST_HOST" "$REGISTER_CMD" \
                    "Error registering $ZVOL_SOURCE in $DST_HOST"

echo "$ZVOL_IQN raw"
