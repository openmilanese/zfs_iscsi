#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# cpds host:remote_system_ds/disk.i fe:SOURCE snapid vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - snapid is the snapshot id. "-1" for none

SRC=$1
DST=$2
SNAP_ID=$3
VM_ID=$4
DS_ID=$5

#--------------------------------------------------------------------------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    LIB_LOCATION=/usr/lib/one
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    LIB_LOCATION=$ONE_LOCATION/lib
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON
source ${DRIVER_PATH}/../../etc/datastore/zfs_iscsi/zfs.conf
source ${DRIVER_PATH}/../../etc/vmm/kvm/kvmrc
source ${DRIVER_PATH}/../../datastore/libfs.sh

ZFS_UTILS=${DRIVER_PATH}/../../datastore/zfs_iscsi/zfs_utils.sh

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------

SRC_HOST=`arg_host $SRC`
ZVOL_SRC=`arg_path $SRC`

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(echo "$ZVOL_SRC" | $AWK -F. '{print $NF}')

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
		    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE)

ZVOL_DEV="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DS_ID| $XPATH  \
                    /DATASTORE/TEMPLATE/POOL_NAME \
                    /DATASTORE/TEMPLATE/BRIDGE_LIST )

POOL_NAME="${XPATH_ELEMENTS[j++]:-$POOL_NAME}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"

DST_HOST=`get_destination_host $VM_ID`

if [ -z "$DST_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

IMAGE_NAME=$(echo $ZVOL_DEV | awk -F: '{print $NF}')
ZVOL_SRC="$POOL_NAME/$IMAGE_NAME"

#-------------------------------------------------------------------------------
# Copy Image back to the datastore
#-------------------------------------------------------------------------------

if [ "$CLONE" = "NO" ]; then
    ZVOL_DST="${ZVOL_SRC}"
else
    ZVOL_DST="${ZVOL_SRC}-${VM_ID}-${DISK_ID}"
fi

DISK_NAME="$(echo $DST | awk -F: '{print $NF}')"
DST="$POOL_NAME/$DISK_NAME"

COPY_CMD=$(cat <<EOF
    SUDO="${SUDO}"

    if [ "$SNAP_ID" != "-1" ]; then
        ZVOL_DST=\$(zvol_find_snap $ZVOL_DST $SNAP_ID)

        if [ -z "\$ZVOL_DST" ]; then
            echo "Target ZVOL not found." >&2
            exit 1
        fi

        ZVOL_DST=\$ZVOL_DST@$SNAP_ID
        $SUDO zfs send \$ZVOL_DST | $SUDO zfs receive -F $DST
        $SUDO zfs destroy $DST@$SNAP_ID
    else
        ZVOL_DST=$ZVOL_DST
        $SUDO zfs snapshot \$ZVOL_DST@clone
        $SUDO zfs send \$ZVOL_DST@clone | $SUDO zfs receive -F $DST
        $SUDO zfs destroy \$ZVOL_DST@clone ; $SUDO zfs destroy $DST@clone
    fi
EOF
)

ssh_exec_and_log_stdin "$DST_HOST" "$COPY_CMD" "$ZFS_UTILS" \
                 "Error cloning $ZVOL_DST to $DST in $DST_HOST"
